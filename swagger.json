{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "ReadJourney API",
    "description": "API for ReadJourney app"
  },
  "servers": [
    { "url": "http://localhost:3000/api-docs" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    }
  ],
  "paths": {
    "/users/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Sign up",
        "description": "Creates a new user account with the provided email and password.",
        "requestBody": {
          "description": "User's email and password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {}
          },
          "400": {
            "description": "Invalid request data",
            "content": {}
          }
        }
      }
    },
    "/users/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Sign in",
        "requestBody": {
          "description": "Signin credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signin successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigninResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password",
        "description": "Sends a password reset link to the user's email if the email is registered in the system.",
        "requestBody": {
          "description": "Email of the user to reset password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Message sent to email: user@example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required email field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required field email"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user found with the provided email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found or email is wrong!!!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/recover-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Recover password",
        "description": "Allows users to set a new password using a password reset token.",
        "requestBody": {
          "description": "Password reset data including the new password and the token.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed to: user@example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to missing fields or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/signout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Sign out",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful, no content to return."
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
   
    
    "/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user info",
        "description": "Retrieves the authenticated user's personal information.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful retrieval of user information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The user is not logged in or the token is invalid."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },

    "/books/popular": {
  "get": {
    "tags": ["Books"],
    "summary": "Fetch popular books",
    "description": "Retrieves a list of popular books.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "responses": {
      "200": {
        "description": "List of popular books retrieved successfully.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  }
},
"/books/{isbn}": {
  "get": {
    "tags": ["Books"],
    "summary": "Fetch a book by ISBN",
    "description": "Retrieves details of a specific book by its ISBN.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "parameters": [
      {
        "in": "path",
        "name": "isbn",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The unique identifier (ISBN) of the book."
      }
    ],
    "responses": {
      "200": {
        "description": "Book details retrieved successfully.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Book"
            }
          }
        }
      },
      "404": {
        "description": "Book not found with the provided ISBN."
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  }
},
"/books/favorites": {
  "get": {
    "tags": ["Books"],
    "summary": "Get favorite books",
    "description": "Fetches a list of favorite books for the authenticated user.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "responses": {
      "200": {
        "description": "List of favorite books retrieved successfully.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  }
},
"/books/favorites/{bookId}": {
  "get": {
    "tags": ["Books"],
    "summary": "Get favorite book by ID",
    "description": "Fetches a specific favorite book by its ID.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "parameters": [
      {
        "in": "path",
        "name": "bookId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The ID of the favorite book."
      }
    ],
    "responses": {
      "200": {
        "description": "Favorite book details retrieved successfully.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Book"
            }
          }
        }
      },
      "404": {
        "description": "Favorite book not found."
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  }
},
"/books/favorites/add": {
  "post": {
    "tags": ["Books"],
    "summary": "Add a book to favorites",
    "description": "Allows the authenticated user to add a book to their favorite list.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/Book"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Book added to favorites successfully.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Book"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  }
},
"/books/favorites/{bookId}/delete": {
  "delete": {
    "tags": ["Books"],
    "summary": "Remove a book from favorites",
    "description": "Allows the authenticated user to remove a book from their favorite list.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "parameters": [
      {
        "in": "path",
        "name": "bookId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The ID of the favorite book to remove."
      }
    ],
    "responses": {
      "200": {
        "description": "Book removed from favorites successfully."
      },
      "404": {
        "description": "Favorite book not found."
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  }
},
"/books/favorites/{bookId}/page": {
  "patch": {
    "tags": ["Books"],
    "summary": "Update the current page",
    "description": "Allows the authenticated user to update the current page of a favorite book.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "parameters": [
      {
        "in": "path",
        "name": "bookId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The ID of the favorite book."
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "currentPage": {
                "type": "integer",
                "example": 150
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Current page updated successfully."
      },
      "404": {
        "description": "Favorite book not found."
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  },
  "get": {
    "tags": ["Books"],
    "summary": "Get the current page",
    "description": "Fetches the current page number of a specific favorite book.",
    "security": [
      {
        "Bearer": []
      }
    ],
    "parameters": [
      {
        "in": "path",
        "name": "bookId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The ID of the favorite book."
      }
    ],
    "responses": {
      "200": {
        "description": "Current page retrieved successfully.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "currentPage": {
                  "type": "integer",
                  "example": 150
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Favorite book not found."
      },
      "401": {
        "description": "Unauthorized. The user is not logged in or the token is invalid."
      }
    }
  }
},
   
 
  "components": {
    "schemas": {
      "SignupRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for user sign up"
          },
          "password": {
            "type": "string",
            "description": "Password for user sign up"
          }
        }
      },
      "SignupResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Congratulations! You have successfully registered!"
          },
          "user": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the user."
              },
              "email": {
                "type": "string",
                "description": "Email address of the user."
              },
              "username": {
                "type": "string",
                "description": "Username of the user."
              },
              "subscription": {
                "type": "string",
                "description": "Subscription status of the user."
              }
            }
          }
        }
      },
      "SigninRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for user sign in"
          },
          "password": {
            "type": "string",
            "description": "Password for user sign in"
          }
        }
      },
      "SigninResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for the user."
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Email address of the user."
              },
              "subscription": {
                "type": "string",
                "description": "Subscription status of the user."
              }
            }
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address to send password reset link"
          }
        }
      },
      "ForgotPasswordResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Message sent to email: {email}"
          }
        }
      },
      "RecoverPasswordRequest": {
        "type": "object",
        "required": ["password", "token"],
        "properties": {
          "password": {
            "type": "string",
            "description": "New password to set"
          },
          "token": {
            "type": "string",
            "description": "Password reset token"
          }
        }
      },
      "RecoverPasswordResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Password changed to: {email}"
          }
        }
      },
      "VerifyEmailResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification successful"
          }
        }
      },
      "ResendVerifyEmailRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address to resend verification link"
          }
        }
      },
      "ResendVerifyEmailResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification email sent"
          }
        }
      },
      "AddBookToFavoritesRequest": {
        "type": "object",
        "required": ["bookId"],
        "properties": {
          "bookId": {
            "type": "string",
            "description": "Unique identifier for the book to be added to favorites."
          }
        }
      },
      "AddBookToFavoritesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Book added to favorites"
          },
          "favorites": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Array of favorite book IDs."
            }
          }
        }
      },
      "RemoveBookFromFavoritesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Book removed from favorites"
          },
          "favorites": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Array of remaining favorite book IDs after removal."
            }
          }
        }
      },
      "FavoriteBooksResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "bookId": {
              "type": "string",
              "description": "Unique identifier of the favorite book."
            },
            "title": {
              "type": "string",
              "description": "Title of the favorite book."
            },
            "author": {
              "type": "string",
              "description": "Author of the favorite book."
            }
          }
        }
      },
      "TopBooksResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "isbn": {
              "type": "string",
              "description": "ISBN number of the book."
            },
            "title": {
              "type": "string",
              "description": "Title of the book."
            },
            "author": {
              "type": "string",
              "description": "Author of the book."
            },
            "rating": {
              "type": "number",
              "format": "float",
              "description": "Rating of the book."
            }
          }
        }
      },
      "BookResponse": {
        "type": "object",
        "properties": {
          "isbn": {
            "type": "string",
            "description": "ISBN number of the book."
          },
          "title": {
            "type": "string",
            "description": "Title of the book."
          },
          "author": {
            "type": "string",
            "description": "Author of the book."
          },
          "summary": {
            "type": "string",
            "description": "Summary of the book."
          },
          "rating": {
            "type": "number",
            "format": "float",
            "description": "Rating of the book."
          }
        }
      },
      "UpdateCurrentPageRequest": {
        "type": "object",
        "required": ["bookId", "currentPage"],
        "properties": {
          "bookId": {
            "type": "string",
            "description": "Unique identifier of the book for which the current page is being updated."
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number where the user stopped reading."
          }
        }
      },
      "UpdateCurrentPageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Page updated"
          },
          "currentPage": {
            "type": "integer",
            "description": "Updated current page number."
          }
        }
      },
      "GetCurrentPageResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "description": "Last page number where the user stopped reading."
          }
        }
      },
        "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }}}}

