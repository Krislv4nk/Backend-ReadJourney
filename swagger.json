{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "ReadJourney API",
    "description": "API for ReadJourney app"
  },
  "servers": [
    { "url": "http://localhost:3000/api-docs" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Books",
      "description": "Books related operations"
    }
  ],
  "paths": {
    "/users/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Sign up",
        "description": "Creates a new user account with the provided email and password.",
        "requestBody": {
          "description": "User's email and password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {}
          },
          "400": {
            "description": "Invalid request data",
            "content": {}
          }
        }
      }
    },
    "/users/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Sign in",
        "requestBody": {
          "description": "Signin credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signin successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigninResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password",
        "description": "Sends a password reset link to the user's email if the email is registered in the system.",
        "requestBody": {
          "description": "Email of the user to reset password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Message sent to email: user@example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required email field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing required field email"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user found with the provided email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found or email is wrong!!!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/recover-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Recover password",
        "description": "Allows users to set a new password using a password reset token.",
        "requestBody": {
          "description": "Password reset data including the new password and the token.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed to: user@example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to missing fields or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/signout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Sign out",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful, no content to return."
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
   
    
    "/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user info",
        "description": "Retrieves the authenticated user's personal information.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful retrieval of user information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The user is not logged in or the token is invalid."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },

    "/users/refresh": {
  "post": {
    "tags": ["Auth"],
    "summary": "Refresh access and refresh token",
    "description": "Allows users to refresh their access token and get a new refresh token.",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "refreshToken": {
                "type": "string",
                "description": "The refresh token issued during sign-in."
              }
            },
            "required": ["refreshToken"]
          },
          "example": {
            "refreshToken": "your-refresh-token-here"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Successful generation of new access and refresh token.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "description": "Newly generated access token."
                },
                "refreshToken": {
                  "type": "string",
                  "description": "Newly generated refresh token."
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized. Refresh token is missing or invalid."
      },
      "403": {
        "description": "Forbidden. User not found or token is expired."
      }
    }
  }
},

    "/books/popular": {
      "get": {
        "tags": ["Books"],
        "summary": "Get popular books",
        "description": "Fetches the top popular books.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "List of popular books",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/books/{isbn}": {
      "get": {
        "tags": ["Books"],
        "summary": "Get book by ISBN",
        "description": "Fetch a book's details by its ISBN.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "isbn",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ISBN of the book"
          }
        ],
        "responses": {
          "200": {
            "description": "Book details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    },
    "/books/favorites/:bookId": {
      "get": {
        "tags": ["Books"],
        "summary": "Get user's favorite books",
        "description": "Fetches a list of books marked as favorites by the user.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "List of favorite books",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoritesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Books"],
        "summary": "Add book to favorites",
        "description": "Adds a book to the user's list of favorite books.",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Book ID to add to favorites",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book added to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/books/favorites/{bookId}": {
      "get": {
        "tags": ["Books"],
        "summary": "Get favorite book by ID",
        "description": "Fetches details of a favorite book by its ID.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the favorite book"
          }
        ],
        "responses": {
          "200": {
            "description": "Book details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "delete": {
        "tags": ["Books"],
        "summary": "Remove book from favorites",
        "description": "Removes a book from the user's favorites.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the book to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Book removed from favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveBookResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    },
    "/books/favorites/{bookId}/page": {
      "patch": {
        "tags": ["Books"],
        "summary": "Update current page of a book",
        "description": "Updates the current reading page of a favorite book.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the book"
          }
        ],
        "requestBody": {
          "description": "Current page data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Page updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "get": {
        "tags": ["Books"],
        "summary": "Get current page of a book",
        "description": "Fetches the current page where the user stopped reading.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the book"
          }
        ],
        "responses": {
          "200": {
            "description": "Current page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentPageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SignupRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "StrongPassword123!"
          }
        }
      },
      "SignupResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-04T10:23:34.121Z"
          }
        }
      },
      "SigninRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "StrongPassword123!"
          }
        }
      },
      "SigninResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "EmailRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          }
        }
      },
      "RecoverPasswordRequest": {
        "type": "object",
        "required": ["token", "newPassword"],
        "properties": {
          "token": {
            "type": "string",
            "example": "e5c1234a..."
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "example": "NewStrongPassword123!"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-04T10:23:34.121Z"
          }
        }
      },
       "RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "The refresh token issued during sign-in."
          }
        },
        "required": ["refreshToken"],
        "example": {
          "refreshToken": "your-refresh-token-here"
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Newly generated access token."
          },
          "refreshToken": {
            "type": "string",
            "description": "Newly generated refresh token."
          }
        },
        "example": {
          "accessToken": "new-access-token-here",
          "refreshToken": "new-refresh-token-here"
        }
      },
      "BooksResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Book"
        }
      },
      "BookResponse": {
        "$ref": "#/components/schemas/Book"
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "title": { "type": "string" },
          "author": { "type": "string" },
          "isbn": { "type": "string" },
          "currentPage": { "type": "integer" },
          "totalPages": { "type": "integer" }
        }
      },
      "AddBookRequest": {
        "type": "object",
        "properties": {
          "bookId": { "type": "string" }
        }
      },
      "AddBookResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "favorites": { "$ref": "#/components/schemas/BooksResponse" }
        }
      },
      "RemoveBookResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "favorites": { "$ref": "#/components/schemas/BooksResponse" }
        }
      },
      "UpdatePageRequest": {
        "type": "object",
        "properties": {
          "currentPage": { "type": "integer" }
        }
      },
      "UpdatePageResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "currentPage": { "type": "integer" }
        }
      },
      "CurrentPageResponse": {
        "type": "object",
        "properties": {
          "currentPage": { "type": "integer" }
        }
      },
      "FavoritesResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Book"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}




